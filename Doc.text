npm install xlsx
PORT=5000
MONGO_DB_USER=mohini
MONGO_DB_PASSWORD=mohiniraut
MONGO_DB_DATABASE=vvmcelectrical
JWT_SECRET=MERNSECRET
API=https://lightbillbackend.saavi.co.in
EMAIL=mohinimraut7@gmail.com
PASSWORD=MohiniRaut@75
BASEURL=https://lightbillbackend.saavi.co.in
AAPPASSWORD=enpz swmp tycr ryhh
-----------------------
API=https://lightbillbackend.saavi.co.in
BASEURL=https://lightbillbackend.saavi.co.in
-----------------

BASEURL=http://localhost:5000
API=http://localhost:5000





BASEURL=http://localhost:5000
API=http://localhost:5000

API=https://lightbillbackend.saavi.co.in
BASEURL=https://lightbillbackend.saavi.co.in



================

vazejeet16@gmail.com
===========================================

exports.addRemarkReports = async (req, res) => {
    try {
        const {
            userId,
            remark,
            role,
            signature,
            ward,
            formType,
            pdfData,
            seleMonth,
            wardName,
            mode
        } = req.body;

        console.log("req.body", req.body.wardName);
        const userWard = req.body.ward;
       
        const missingFields = [];
        if (!role) missingFields.push("role");
        if (!remark) missingFields.push("remark");
        if (!formType) missingFields.push("formType");
        if (!seleMonth) missingFields.push("seleMonth");
        if (!ward) missingFields.push("ward");

        if (missingFields.length > 0) {
            return res.status(400).json({
                message: `Missing required fields: ${missingFields.join(", ")}`
            });
        }

       
        const formNumber = await generateFormNumber(formType);
        let document = null;

       
        if (req.file) {
            document = {
                formType,
                formNumber,
                pdfFile: req.file.path,
                uploadedAt: new Date(),
                seleMonth
            };
        } else if (pdfData) {
            const pdfFilePath = saveBase64File(pdfData, formNumber);
            if (pdfFilePath) {
                document = {
                    formType,
                    formNumber,
                    pdfFile: pdfFilePath,
                    uploadedAt: new Date(),
                    seleMonth
                };
            } else {
                return res.status(400).json({
                    message: "Invalid base64 PDF data."
                });
            }
        } else {
            return res.status(400).json({
                message: "No file or PDF data provided."
            });
        }

      
        const createRemark = ({ userId,ward,role, remark, signature, document,userWard  }) => {
            const remarkObj = {
                userId: new mongoose.Types.ObjectId(userId),
                ward,
                userWard,
                role,
                remark,
                signature,
                date: new Date()
            };

          
           
if (document && role !== "Lipik") {
    const lipikRemark = report.reportingRemarks.find(r => r.role === "Lipik");

    if (lipikRemark) {
        lipikRemark.documents = lipikRemark.documents || [];

        const docIndex = lipikRemark.documents.findIndex(doc => doc.formType === formType);

        if (mode === "edit") {
            if (docIndex !== -1) {
                const existingDoc = lipikRemark.documents[docIndex];

                lipikRemark.documents[docIndex] = {
                    ...existingDoc,
                    ...document,
                    uploadedAt: new Date(),
                    signatures: {
                        ...(existingDoc.signatures || {}),
                        [role]: signature  // Add/update the current role's signature
                    }
                };
            } else {
                lipikRemark.documents.push({
                    ...document,
                    uploadedAt: new Date(),
                    signatures: {
                        [role]: signature
                    }
                });
            }
        } else {
            const alreadyExists = lipikRemark.documents.some(doc => doc.formType === formType);
            if (!alreadyExists) {
                lipikRemark.documents.push({
                    ...document,
                    uploadedAt: new Date(),
                    signatures: {
                        [role]: signature
                    }
                });
            }
        }
    } else {
        return res.status(400).json({
            message: "Lipik remark not found. Cannot attach document."
        });
    }
}


            return remarkObj;
        };

      
        if (role === "Junior Engineer" && ward === "Head Office" && wardName) {
            let wardReport = await Report.findOne({ seleMonth, ward: wardName });

            if (!wardReport) {
                wardReport = new Report({
                    seleMonth,
                    userWard,
                    ward: wardName,
                    monthReport: seleMonth,
                });
            }

            const jeRemark = {
                userId: new mongoose.Types.ObjectId(userId),
                role: "Junior Engineer",
                ward,
                userWard,
                remark,
                signature,
                date: new Date(),
            };

            const jeExists = wardReport.reportingRemarks.some(r =>
                r.userId.toString() === userId &&
                r.role === "Junior Engineer" &&
                r.remark === remark
            );

            if (!jeExists) {
                wardReport.reportingRemarks.push(jeRemark);
                await wardReport.save();
            }

            return res.status(201).json({
                message: `Junior Engineer remark added to ward ${wardName} successfully.`,
                report: wardReport
            });
        }

      
        let report = await Report.findOne({ seleMonth, ward });

        if (!report) {
            report = new Report({
                seleMonth,
                ward,
                monthReport: seleMonth,
            });
        }

      
        if (report.reportingRemarks.length === 0) {
            // First remark must be from Lipik (specific ward)
            if (role !== "Lipik") {
                return res.status(400).json({
                    message: "The first remark must be from the role 'Lipik'."
                });
            }
        } 
        
        else if (report.reportingRemarks.length === 1) {
            const firstRemark = report.reportingRemarks[0];
        
            // Second remark must be from Junior Engineer (same ward as Lipik, Head Office not allowed)
            if (role !== "Junior Engineer") {
                return res.status(400).json({
                    message: "The second remark must be from the role 'Junior Engineer'."
                });
            }
        
            if (userWard === "Head Office") {
                return res.status(400).json({
                    message: "Junior Engineer from 'Head Office' is not allowed for second remark."
                });
            }
        
            if (userWard !== firstRemark.userWard) {
                return res.status(400).json({
                    message: `Junior Engineer's ward must match Lipik's ward ('${firstRemark.userWard}').`
                });
            }
        }
        
        // -----------------------------------------------------
       
        
        else if (report.reportingRemarks.length === 2) {
            const secondRemark = report.reportingRemarks[1];
        
            // Third remark must be from Junior Engineer (Head Office only)
            if (role !== "Junior Engineer" || ward !== "Head Office") {
                return res.status(400).json({
                    message: "The third remark must be from the role 'Junior Engineer' from 'Head Office'."
                });
            }
        }
        else if (report.reportingRemarks.length === 3) {
            const thirdRemark = report.reportingRemarks[2];
        
            // Fourth remark must be from Accountant
            if (role !== "Accountant") {
                return res.status(400).json({
                    message: "The fourth remark must be from the role 'Accountant'."
                });
            }
        
            // Accountant must match Junior Engineer (Head Office) ward
            if (ward !== thirdRemark.ward) {
                return res.status(400).json({
                    message: `Accountant must belong to same ward as Junior Engineer from Head Office ('${thirdRemark.ward}').`
                });
            }
        }
        else if (report.reportingRemarks.length === 4) {
            const fourthRemark = report.reportingRemarks[3];
        
            // Fifth remark must be from Assistant Municipal Commissioner
            if (role !== "Assistant Municipal Commissioner") {
                return res.status(400).json({
                    message: "The fifth remark must be from the role 'Assistant Municipal Commissioner'."
                });
            }
        
            if (ward !== fourthRemark.ward) {
                return res.status(400).json({
                    message: `Assistant Municipal Commissioner must belong to same ward as Accountant ('${fourthRemark.ward}').`
                });
            }
        }
        else if (report.reportingRemarks.length === 5) {
            const fifthRemark = report.reportingRemarks[4];
        
            // Sixth remark must be from Dy. Municipal Commissioner
            if (role !== "Dy. Municipal Commissioner") {
                return res.status(400).json({
                    message: "The sixth remark must be from the role 'Dy. Municipal Commissioner'."
                });
            }
        
            if (ward !== fifthRemark.ward) {
                return res.status(400).json({
                    message: `Dy. Municipal Commissioner must belong to same ward as Assistant Municipal Commissioner ('${fifthRemark.ward}').`
                });
            }
        }
        else {
            return res.status(400).json({
                message: "Invalid number of remarks or roles."
            });
        }
        

        const index = report.reportingRemarks.findIndex(r =>
            r.userId.toString() === userId &&
            r.role === role &&
            report.ward === ward
        );

        if (index !== -1) {
            const existing = report.reportingRemarks[index];
            existing.remark = remark;
            existing.signature = signature;
            existing.date = new Date();
            existing.documents = existing.documents || [];

            const docIndex = existing.documents.findIndex(doc => doc.formType === formType);

            if (mode === "edit") {
                if (docIndex !== -1) {
                    existing.documents[docIndex] = document;
                } else {
                    existing.documents.push(document);
                }
            } else {
                const alreadyExists = existing.documents.some(doc => doc.formType === formType);
                if (!alreadyExists && document) {
                    existing.documents.push(document);
                }
            }

            report.reportingRemarks[index] = existing;
        } else {
            const newRemark = createRemark({ userId, role,ward,remark, signature, document,userWard });
            report.reportingRemarks.push(newRemark);
        }

        await report.save();

        res.status(201).json({
            message: "Report added/updated successfully.",
            report
        });

    } catch (error) {
        console.error("🚨 Error adding/updating report:", error);
        res.status(500).json({
            message: "An error occurred while adding the report.",
            error: error.message
        });
    }
};
===================
if (role === "Junior Engineer" && ward === "Head Office" && wardName) {
            let wardReport = await Report.findOne({ seleMonth, ward: wardName });

            if (!wardReport) {
                wardReport = new Report({
                    seleMonth,
                    userWard,
                    ward: wardName,
                    monthReport: seleMonth,
                });
            }

            const jeRemark = {
                userId: new mongoose.Types.ObjectId(userId),
                role: "Junior Engineer",
                ward,
                userWard,
                remark,
                signature,
                date: new Date(),
            };

            const jeExists = wardReport.reportingRemarks.some(r =>
                r.userId.toString() === userId &&
                r.role === "Junior Engineer" &&
                r.remark === remark
            );

            if (!jeExists) {
                wardReport.reportingRemarks.push(jeRemark);
                await wardReport.save();
            }

            return res.status(201).json({
                message: `Junior Engineer remark added to ward ${wardName} successfully.`,
                report: wardReport
            });
        }

======================

const mongoose = require('mongoose');

const reportSchema = new mongoose.Schema({
  monthReport: { type: String },
  seleMonth: { type: String },
  ward: { type: String },
    reportingRemarks: [
        {
          userId: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
          role: { type: String }, 
          remark: { type: String }, 
          userWard:{ type: String },
          signature: { type: String },
          date: { type: Date, default: Date.now }, 
          documents: [
            {
                formType: { type: String},
                formNumber: { type: String}, 
                pdfFile: { type: String }, 
                uploadedAt: { type: Date, default: Date.now },
                // seleMonth:{ type: String },
            }
        ]
          
          // seleMonth:{ type: String },
        }
      ],
      
     
}, { timestamps: true }); 

module.exports = mongoose.model('Report', reportSchema);

-----------------------------------------------------
PORT=5000
MONGO_DB_USER=mohini
MONGO_DB_PASSWORD=mohiniraut
MONGO_DB_DATABASE=vvmcelectrical
JWT_SECRET=MERNSECRET
EMAIL=mohinimraut7@gmail.com
PASSWORD=MohiniRaut@75
API=http://localhost:5000
BASEURL=http://localhost:5000
AAPPASSWORD=enpz swmp tycr ryhh

===================================

 // if (role === "Lipik") {
            //     remarkObj.documents = document ? [document] : [];
            // }
// -------------------------------------------------------------------

            // if (document && role !== "Lipik") {
            //     const lipikRemark = report.reportingRemarks.find(r => r.role === "Lipik");
            
            //     if (lipikRemark) {
            //         lipikRemark.documents = lipikRemark.documents || [];
            
            //         const docIndex = lipikRemark.documents.findIndex(doc => doc.formType === formType);
            
            //         if (mode === "edit") {
            //             if (docIndex !== -1) {
            //                 lipikRemark.documents[docIndex] = document;
            //             } else {
            //                 lipikRemark.documents.push(document);
            //             }
            //         } else {
            //             const alreadyExists = lipikRemark.documents.some(doc => doc.formType === formType);
            //             if (!alreadyExists) {
            //                 lipikRemark.documents.push(document);
            //             }
            //         }
            //     } else {
            //         return res.status(400).json({
            //             message: "Lipik remark not found. Cannot attach document."
            //         });
            //     }
            // }
            
// -------------------------------------------------------------

// if (document && role !== "Lipik") {
//     const lipikRemark = report.reportingRemarks.find(r => r.role === "Lipik");

//     if (lipikRemark) {
//         lipikRemark.documents = lipikRemark.documents || [];

//         const docIndex = lipikRemark.documents.findIndex(doc => doc.formType === formType);

//         if (mode === "edit") {
//             if (docIndex !== -1) {
//                 // Overwrite only specific fields, preserve others
//                 lipikRemark.documents[docIndex] = {
//                     ...lipikRemark.documents[docIndex],
//                     ...document,
//                     uploadedAt: new Date()  // optionally update the timestamp
//                 };
//             } else {
//                 lipikRemark.documents.push(document);
//             }
//         } else {
//             const alreadyExists = lipikRemark.documents.some(doc => doc.formType === formType);
//             if (!alreadyExists) {
//                 lipikRemark.documents.push(document);
//             }
//         }
//     } else {
//         return res.status(400).json({
//             message: "Lipik remark not found. Cannot attach document."
//         });
//     }
// }
// -------------------------------------------
bolt.new
------

exports.addRemarkReports = async (req, res) => {
    try {
        const {
            userId,
            remark,
            role,
            signature,
            ward,
            formType,
            pdfData,
            seleMonth,
            wardName,
            mode
        } = req.body;

        let userWard = ward;

        // Validate required fields
        const missingFields = [];
        if (!role) missingFields.push("role");
        if (!remark) missingFields.push("remark");
        if (!formType) missingFields.push("formType");
        if (!seleMonth) missingFields.push("seleMonth");
        if (!ward) missingFields.push("ward");

        if (missingFields.length > 0) {
            return res.status(400).json({
                message: `Missing required fields: ${missingFields.join(", ")}`
            });
        }

        // Process document
        const formNumber = await generateFormNumber(formType);
        let document = null;

        if (req.file) {
            document = {
                formType,
                formNumber,
                pdfFile: req.file.path,
                uploadedAt: new Date(),
                seleMonth,
                approvedBy: []
            };
        } else if (pdfData) {
            const pdfFilePath = saveBase64File(pdfData, formNumber);
            if (!pdfFilePath) {
                return res.status(400).json({ message: "Invalid PDF data" });
            }
            document = {
                formType,
                formNumber,
                pdfFile: pdfFilePath,
                uploadedAt: new Date(),
                seleMonth,
                approvedBy: []
            };
        }

        // Handle Head Office Junior Engineer
        if (role === "Junior Engineer" && ward === "Head Office" && wardName) {
            let targetWardReport = await Report.findOne({ seleMonth, ward: wardName });
            if (!targetWardReport) {
                return res.status(400).json({
                    message: "Report not found for target ward"
                });
            }

            const validation = validateWorkflowStep(
                wardName,
                role,
                ward,
                targetWardReport.reportingRemarks
            );

            if (!validation.valid) {
                return res.status(400).json({ message: validation.message });
            }

            const newRemark = {
                userId: new mongoose.Types.ObjectId(userId),
                role,
                ward,
                userWard,
                remark,
                signature,
                date: new Date()
            };

            targetWardReport.reportingRemarks.push(newRemark);
            await targetWardReport.save();

            return res.status(200).json({
                message: "Head Office approval added successfully",
                report: targetWardReport
            });
        }

        // Regular ward processing
        let report = await Report.findOne({ seleMonth, ward });
        if (!report) {
            if (role !== "Lipik") {
                return res.status(400).json({
                    message: "First remark must be from Lipik"
                });
            }
            report = new Report({
                seleMonth,
                ward,
                monthReport: seleMonth,
                reportingRemarks: []
            });
        }

        // Validate workflow step
        const validation = validateWorkflowStep(
            ward,
            role,
            ward,
            report.reportingRemarks
        );

        if (!validation.valid) {
            return res.status(400).json({ message: validation.message });
        }

        // Add or update remark
        const remarkIndex = report.reportingRemarks.findIndex(r =>
            r.userId.toString() === userId &&
            r.role === role &&
            r.ward === ward
        );

        const remarkData = {
            userId: new mongoose.Types.ObjectId(userId),
            role,
            ward,
            userWard,
            remark,
            signature,
            date: new Date(),
            documents: []
        };

        if (role === "Lipik" && document) {
            remarkData.documents.push(document);
        }

        if (remarkIndex === -1) {
            report.reportingRemarks.push(remarkData);
        } else {
            report.reportingRemarks[remarkIndex] = {
                ...report.reportingRemarks[remarkIndex],
                ...remarkData
            };
        }

        await report.save();

        res.status(200).json({
            message: "Report updated successfully",
            report
        });

    } catch (error) {
        console.error("Error:", error);
        res.status(500).json({
            message: "An error occurred",
            error: error.message
        });
    }
};
==========================
exports.addRemarkReports = async (req, res) => {
    try {
        const {
            userId,
            remark,
            role,
            signature,
            ward,
            formType,
            pdfData,
            seleMonth,
            wardName,
            mode
        } = req.body;

        let userWard = ward;

        const missingFields = [];
        if (!role) missingFields.push("role");
        if (!remark) missingFields.push("remark");
        if (!formType) missingFields.push("formType");
        if (!seleMonth) missingFields.push("seleMonth");
        if (!ward) missingFields.push("ward");

        if (missingFields.length > 0) {
            return res.status(400).json({
                message: `Missing required fields: ${missingFields.join(", ")}`
            });
        }

        const formNumber = await generateFormNumber(formType);
        let document = null;

        if (req.file) {
            document = {
                formType,
                formNumber,
                pdfFile: req.file.path,
                uploadedAt: new Date(),
                seleMonth,
                approvedBy: [] 
            };
        } else if (pdfData) {
            const pdfFilePath = saveBase64File(pdfData, formNumber);
            if (pdfFilePath) {
                document = {
                    formType,
                    formNumber,
                    pdfFile: pdfFilePath,
                    uploadedAt: new Date(),
                    seleMonth,
                    approvedBy: []  
                };
            } else {
                return res.status(400).json({
                    message: "Invalid base64 PDF data."
                });
            }
        } else {
            return res.status(400).json({
                message: "No file or PDF data provided."
            });
        }

        // This function creates the reporting flow for all roles
        const createDefaultReportingFlow = (userId, userWard, signature, remark, document) => {
            const date = new Date();
        
            return [
                {
                    role: "Lipik",
                    ward: userWard,
                    userId: new mongoose.Types.ObjectId(userId), // Ensure userId is added here
                    remark,
                    signature,
                    date,
                    userWard,
                    documents: document ? [document] : []
                },
                {
                    role: "Junior Engineer",
                    ward: userWard,
                    userId: new mongoose.Types.ObjectId(userId), // Ensure userId is added here
                    date
                },
                {
                    role: "Junior Engineer",
                    ward: "Head Office",
                    userId: new mongoose.Types.ObjectId(userId), // Ensure userId is added here
                    date
                },
                {
                    role: "Accountant",
                    ward: userWard,
                    userId: new mongoose.Types.ObjectId(userId), // Ensure userId is added here
                    date
                },
                {
                    role: "Assistant Municipal Commissioner",
                    ward: userWard,
                    userId: new mongoose.Types.ObjectId(userId), // Ensure userId is added here
                    date
                },
                {
                    role: "Dy.Municipal Commissioner",
                    ward: userWard,
                    userId: new mongoose.Types.ObjectId(userId), // Ensure userId is added here
                    date
                }
            ];
        };

        // The function for creating and adding remarks
        const createRemark = ({ userId, ward, role, remark, signature, document, userWard }) => {
            const remarkObj = {
                userId: new mongoose.Types.ObjectId(userId),
                ward,
                role,
                remark,
                signature,
                userWard,
                date: new Date(),
                documents: []
            };

            if (document && role === "Lipik") {
                remarkObj.documents.push(document);
            }

            if (remark === "Approved" && document) {
                document.approvedBy.push(userId);
            }

            if (document && role !== "Lipik") {
                const lipikRemark = report.reportingRemarks.find(r => r.role === "Lipik");

                if (lipikRemark) {
                    lipikRemark.documents = lipikRemark.documents || [];
                    const docIndex = lipikRemark.documents.findIndex(doc => doc.formType === formType);

                    if (mode === "edit") {
                        if (docIndex !== -1) {
                            const existingDoc = lipikRemark.documents[docIndex];
                            const updatedDoc = {
                                ...existingDoc,
                                ...document,
                                uploadedAt: new Date(),
                                signatures: {
                                    ...(existingDoc.signatures || {}),
                                    [role]: signature
                                },
                                approvedBy: existingDoc.approvedBy || []
                            };

                            if (remark === "Approved" && !updatedDoc.approvedBy.includes(userId)) {
                                updatedDoc.approvedBy.push(userId);
                            }

                            lipikRemark.documents[docIndex] = updatedDoc;
                        } else {
                            lipikRemark.documents.push({
                                ...document,
                                uploadedAt: new Date(),
                                signatures: {
                                    [role]: signature
                                },
                                approvedBy: remark === "Approved" ? [userId] : []  
                            });
                        }
                    } else {
                        const alreadyExists = lipikRemark.documents.some(doc => doc.formType === formType);
                        if (!alreadyExists) {
                            lipikRemark.documents.push({
                                ...document,
                                uploadedAt: new Date(),
                                signatures: {
                                    [role]: signature
                                },
                                approvedBy: remark === "Approved" ? [userId] : []  
                            });
                        }
                    }
                } else {
                    return res.status(400).json({
                        message: "Lipik remark not found. Cannot attach document."
                    });
                }
            }
            return remarkObj;
        };

        // Handle report addition and validation
        if (role === "Junior Engineer" && ward === "Head Office" && wardName) {
            let wardReport = await Report.findOne({ seleMonth, ward: wardName });

            if (!wardReport) {
                return res.status(400).json({
                    message: "The first remark must be from the role 'Lipik'."
                });
            }

            const jeRemark = {
                userId: new mongoose.Types.ObjectId(userId),
                role: "Junior Engineer",
                ward,
                userWard,
                remark,
                signature,
                date: new Date(),
            };

            if (remark === "Approved") {
                jeRemark.approvedBy = new mongoose.Types.ObjectId(userId);
            }

            const jeExists = wardReport.reportingRemarks.some(r =>
                r.userId.toString() === userId &&
                r.role === "Junior Engineer" &&
                r.remark === remark
            );

            if (!jeExists) {
                if (remark === "Approved") {
                    const lipikRemark = wardReport.reportingRemarks.find(r => r.role === "Lipik");
                    if (lipikRemark && lipikRemark.documents?.length > 0) {
                        const docIndex = lipikRemark.documents.findIndex(doc => doc.formType === formType);
                        if (docIndex !== -1) {
                            const doc = lipikRemark.documents[docIndex];
                            if (!doc.approvedBy.includes(userId)) {
                                doc.approvedBy.push(userId);
                            }
                            lipikRemark.documents[docIndex] = doc;
                        }
                    }
                }

                wardReport.reportingRemarks.push(jeRemark);
                await wardReport.save();
            }

            return res.status(201).json({
                message: `Junior Engineer remark added to ward ${wardName} successfully.`,
                report: wardReport
            });
        }

        let report = await Report.findOne({ seleMonth, ward });

        if (!report) {
            report = new Report({
                seleMonth,
                ward,
                monthReport: seleMonth,
            });
        }

        if (report.reportingRemarks.length === 0 && role !== "Lipik") {
            return res.status(400).json({
                message: "The first remark must be from the role 'Lipik'."
            });
        }

        if (report.reportingRemarks.length === 0 && role === "Lipik") {
            // Add all default roles
            const defaultFlow = createDefaultReportingFlow(userId, ward, signature, remark, document);
            report.reportingRemarks = defaultFlow;
        } else {
            const index = report.reportingRemarks.findIndex(r =>
                r.userId.toString() === userId &&
                r.role === role &&
                report.ward === ward
            );

            if (index !== -1) {
                const existing = report.reportingRemarks[index];
                existing.remark = remark;
                existing.signature = signature;
                existing.date = new Date();
                existing.documents = existing.documents || [];

                const docIndex = existing.documents.findIndex(doc => doc.formType === formType);

                if (mode === "edit") {
                    if (docIndex !== -1) {
                        existing.documents[docIndex] = document;
                    } else {
                        existing.documents.push(document);
                    }
                } else {
                    const alreadyExists = existing.documents.some(doc => doc.formType === formType);
                    if (!alreadyExists && document) {
                        existing.documents.push(document);
                    }
                }

                report.reportingRemarks[index] = existing;
            } else {
                const newRemark = createRemark({ userId, role, ward, remark, signature, document, userWard });
                report.reportingRemarks.push(newRemark);
            }
        }

        await report.save();

        res.status(201).json({
            message: "Report added/updated successfully.",
            report
        });

    } catch (error) {
        console.error("🚨 Error adding/updating report:", error);
        res.status(500).json({
            message: "An error occurred while adding the report.",
            error: error.message
        });
    }
};
------------------------------------------------
billDate: {
        type: String,
        required: true,
      },

consumerNumber last billDate cheeck karane paymentStatus==="unpaid" usel tar paid set karane
aani lastReceiptDate > billDate
and lastReceiptAmount eka barobar match hoil netBillAmount or netBillAmountWithDPC or promptPaymentAmount
===================================
BASEURL=http://localhost:5000
API=http://localhost:5000

API=https://lightbillbackend.saavi.co.in
BASEURL=https://lightbillbackend.saavi.co.in
